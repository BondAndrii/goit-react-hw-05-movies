{"version":3,"file":"static/js/947.0528244b.chunk.js","mappings":"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","sources":["components/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport {\n    Link, NavLink, Outlet,\n    useLocation,\n    useParams\n} from \"react-router-dom\";\n\nimport  api  from 'services/api';\n\n// import styles from \"./MovieDetails.module.css\"\n\nimport NoPoster from \"../../assets/NoPoster.png\"\n\nimport { Suspense } from \"react\";\n\n\n\nconst MovieDetails = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [movieData, setMovieData] = useState([]);\n    const { movieId } = useParams();\n    console.log(useParams())\n  console.log(\"in movieDetails\", movieId);\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const data = await api.fetchDetails(movieId);\n        console.log(data);\n        setMovieData(data);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n    // const { poster_path, title, vote_average, overview, genres, tagline } = movieData;\nconst Score =Math.round( movieData?.vote_average * 10);\nconst Genres = movieData?.genres?.map(genre => genre.name).join(', ');\n\n  return (\n    <>\n       {isLoading && <div>Loading...</div>}\n\n      {error && !isLoading && (\n        <h2 style={{ textAlign: 'center' }}>\n          Try again. Something went wrong!\n        </h2>\n      )}\n\n      {!error && !isLoading && movieData && (\n        <div>\n            <Link to={backLinkLocationRef.current}  > Go Back </Link>\n          <div>\n            <img\n              src={\n                movieData?.poster_path\n                  ? `https://image.tmdb.org/t/p/original${movieData?.poster_path}`\n                  : NoPoster\n              }\n              alt={movieData?.title || movieData?.original_title}\n              width=\"200\"\n            />\n          </div>\n          <div>\n            <h2>{movieData?.title || movieData?.original_title}</h2>\n            <p>User score: {Score}</p>\n            {movieData?.overview?.length > 0 && (\n              <>\n                <h3>Overview</h3>\n                <p>{movieData?.overview}</p>\n              </>\n            )}\n            {movieData?.genres?.length > 0 && (\n              <>\n                <h4>Genres</h4>\n                <p>{Genres}</p>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n      <>\n        <h2>Additional information</h2>\n        <nav>       \n            \n              <NavLink to=\"cast\" state={{ from: location }}>\n                Cast\n              </NavLink>\n            \n            \n              <NavLink to=\"reviews\" state={{ from: location }}>\n                Reviews\n              </NavLink>\n            \n          \n        </nav>\n      </>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\n// const MovieDetails = ({forDetailsId}) => {\n//     const [details, setDetails] = useState({})\n//     const location = useLocation(); \n//     const imgUrl = 'https://image.tmdb.org/t/p/w400';\n    \n//     const backAdress = \"/movies\";\n\n//     const backLinkHref = location.state?.from ?? backAdress;\n//     // console.log(\"location in Details\", location)\n//     useEffect(() => {\n        \n//         api.fetchDetails(forDetailsId).then(responce => { setDetails(responce) }).catch(error => console.log(error))\n//     }\n//   , [forDetailsId]);\n//     const { poster_path, title, vote_average, overview, genres, tagline } = details;\n//     const score =Math.round( vote_average * 10);\n//     return (\n//         <div >\n//             <Link className={styles.GoBack} to={backLinkHref}> Go Back </Link>\n//             {/* <p className={styles.GoBack}>Go back</p> */}\n//             <div className={styles.StandartInform}>\n//                 <img\n//                     src={poster_path ? (imgUrl + poster_path): NoPoster}\n//                     // src={NoPoster}\n//                     className={styles.Banner}\n//                     alt={tagline} /> \n//                 <div className={styles.Inform}>\n//                     <h1>{title }</h1>\n//                     <p>User Score: {vote_average ? score : 0 }%</p>\n//                     <h2>Overview</h2>\n//                     <p>{ overview}</p>\n//                     <h2>Genres</h2>\n//                     <ul className={styles.Genres}>\n//                         {genres?.map(genr => <p className={styles.GenresItem} key={genr.id}>{genr.name}</p>)}\n//                     </ul>\n//                 </div>\n                \n               \n//             </div>           \n//             <nav className={styles.Navigation} >\n//                 <h2>Additional information</h2>\n//                 <Link to={`/movies/${forDetailsId}/cast`}>Cast</Link>\n//                 <Link to={`/movies/${forDetailsId}/reviews`}>Review</Link>\n//             </nav>\n//                 <Suspense fallback={<div>Loading...</div>}>\n//                     <Outlet />\n//                 </Suspense>     \n           \n//         </div>\n//     )\n// }\n\nexport default MovieDetails;","import axios from \"axios\";\n\nconst key = '278bf75944205bdb0a6474cdc0be106c'; \n\nasync function fetchTrend() {\n    try {\n        const {data} = await axios.get(`https://api.themoviedb.org/3/trending/all/day?api_key=${key}`)\n        // console.log(data.results);\n        return data.results\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\n\nasync function fetchMovie(filmName) {\n    try {\n        const {data} = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${filmName}&language=en-US&page=1&per_page=12&include_adult=false`)\n        // console.log(data.results);\n        return data;\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\n\nasync function fetchDetails(id) {\n    try {\n        const {data} = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`);\n        console.log(\"fetchDetails\", data);\n        return data;\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\nasync function fetchCast (movieId) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${key}`\n    );\n    // console.log(data.cast);\n    return data.cast;\n  } catch (error) {\n    throw new Error('Oops, there is no cast movie');\n  }\n};\n\nasync function  fetchReviews(movieId) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${key}`\n    );\n    // console.log(data.results);\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, we don`t have any reviews');\n  }\n};\n// async function fetchTop() {\n\n    \n//     let list = [];\n//     await axios.get(`https://api.themoviedb.org/3/trending/all/day?api_key=${key}`)\n//         .then(responce => {\n//             // console.log(\"in fetchTop\", responce.data.results)\n//             if (responce.data.results.length > 0) {\n//                 list = responce.data.results;\n//                 return\n//             }\n//                 return\n            \n            \n//         }).catch(error => console.log(\"in fetchTop\", error))\n           \n            \n              \n//     return list;\n// }\n\n// export async function getTrendingMovies() {\n//   try {\n//     const {data} = await axios.get(\n//       `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&include_adult=false`\n//     );\n//     return data;\n//   } catch (error) {\n//     throw new Error('Oops, we don`t have any movies');\n//   }\n// }\n\n// async function fetchMovie(filmName) {\n//     let list = [];\n//     await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${filmName}&language=en-US&page=1&per_page=12&include_adult=false`)\n//         .then(responce => {\n//             // console.log(\"in fetchMovie\", responce.data.results)\n//             if (responce.data.results.length > 0) {\n//                 list = responce.data.results;\n//                 return\n//             }\n//             return\n//         })\n//     return list;\n// }\n\n// async function fetchDetails(id) {\n//     let obj = {};\n//     await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`)\n//         .then(responce => {\n//             // console.log(\"in fetchDetails\", responce.data)\n//             if (responce.data) {\n//                 obj = responce.data;\n//                 return\n//             }\n//             return\n//         })\n//     return obj;\n// }\n\n// async function fetchReviews(id) {\n//     let list = [];\n//     await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${key}&language=en-US&page=1`)\n//         .then(responce => {\n//             // console.log(\"in fetchReviews\", responce.data.results)\n//             if (responce.data.results.length > 0) {\n//                 list = responce.data.results;\n//                 return\n//             }\n//             return\n//         })\n//     return list;\n// }\n\n// async function fetchCast(id) {\n//     let list = [];\n//     await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${key}&language=en-US`)\n//         .then(responce => {\n//             // console.log(\"in fetchTop\", responce.data.cast)\n//             if (responce.data.cast.length > 0) {\n//                 list = responce.data.cast;\n//                 return\n//             }\n//             return\n//         })\n//     return list;\n// }\n\n\n    \nconst api = {\n    // fetchTop,\n    fetchMovie,\n    fetchDetails,\n    fetchCast,\n    fetchReviews,\n    fetchTrend,\n}\n\n\nexport default api;"],"names":["useState","isLoading","setIsLoading","error","setError","movieData","setMovieData","movieId","useParams","console","log","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","api","data","message","Score","Math","round","vote_average","Genres","genres","map","genre","name","join","style","textAlign","to","current","src","poster_path","NoPoster","alt","title","original_title","width","overview","length","Suspense","fallback","key","fetchTrend","axios","results","Error","fetchMovie","filmName","fetchDetails","id","fetchCast","cast","fetchReviews"],"sourceRoot":""}