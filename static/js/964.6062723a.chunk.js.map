{"version":3,"file":"static/js/964.6062723a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Maper/Maper.module.css?d36b","components/Maper/Maper.jsx","components/SearchMovies/SearchMovies.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Maper\":\"Maper_Maper__4zIDv\",\"MaperItem\":\"Maper_MaperItem__v8LOy\"};","import React from \"react\";\n\nimport { Link, useLocation } from \"react-router-dom\";\n\nimport styles from \"./Maper.module.css\"\n\nconst Maper = ({ data,\n// getId\n}) => {\n    // console.log(\"searchList in Maper\", data)\n    \n    const location = useLocation();\n\n//    console.log(\"location in search\", location)\n\n    // const getId = (event) => {\n    //     const { id } = event.target;\n    //     onClick(id);      \n    // }\n    return (\n    <ul className={styles.Maper}>\n            {data.map(item => {\n                const { id, title, name } = item;\n                // console.log(\"in item\", item)\n                return (\n                    <li key={id}>\n                        <Link\n                            className={styles.MaperItem}\n                            to={`/movies/${id}`}\n                            state={{ from: location }}                        \n                            // id={id}\n                            // onClick={getId}\n                        >{title || name}\n                            \n                        </Link>\n                    </li>\n                )\n               \n            })}\n    </ul>\n    )\n     \n}\n\nexport default Maper;","import React\n// { useState }\n    from \"react\";\n\nimport { Field, Form, Formik } from 'formik';\n\n// import Maper  from \"components/Maper/Maper\";\n\n// import styles from \"./SearchMovies.module.css\"\n\n\n\n// const SearchMovies = ({onSubmit, list, getId}) => {\n    \n    // const [searchMovie, setSearchMovie] = useState('');    \n\n    // const handleChange = (event) => {\n    //     const { value } = event.target;\n    //     setSearchMovie(value);\n    //     // onChange(value);\n        \n    // }\n    // const handleSubmit = (event) => {        \n    //     event.preventDefault();\n    //     onSubmit(searchMovie)        \n    //     reset()\n    // }\n\n    // const reset = () => {\n    //     setSearchMovie('')\n    // }\nconst SearchMovies = ({onSubmit}) => {\n     return (\n        <>\n            <Formik\n                initialValues={{ query: ' ' }}\n                onSubmit={(values, { resetForm }) => {\n                onSubmit(values.query.trim());\n                resetForm();\n                }}\n            >\n                <Form>\n                <Field\n                    as=\"input\"\n                    autoComplete=\"off\"\n                    placeholder=\"Search movie...\"\n                    name=\"query\"\n                    autoFocus\n                />\n                <button type=\"submit\">Search</button>\n                </Form>\n             </Formik> \n         </>\n     )\n}\n   \n      \n\nexport default SearchMovies;\n  /* <form className={styles.Form} onSubmit={handleSubmit}>\n            <label> \n                <input\n                value={searchMovie}\n                type='text'\n                placeholder=\"enter film`s name\"\n                onChange={handleChange}\n                ></input>\n                <button type=\"submit\">Submit</button>\n            </label>\n            </form>\n            <Maper data={list} onClick={getId} />             */\n    // </>     \n    // )\n// }\n","import React\n// { Suspense, useRef }\n    from \"react\";\n\nimport { useState, useEffect } from \"react\";\n\nimport {\n    // Link, Outlet,\n    useLocation, useSearchParams\n} from \"react-router-dom\";\n\nimport SearchMovies from \"components/SearchMovies/SearchMovies\";\n\nimport Maper from \"components/Maper/Maper\";\n\nimport api from \"services/api\";\n\n// import { Suspense } from \"react\";\n\nconst MoviesPage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [films, setFilms] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  console.log(query);\n\n  const location = useLocation();\n//   const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (query === '') return;\n        setIsLoading(true);\n        setError(null);\n\n        const data = await api.fetchMovie(query);\n        // console.log(data);\n        if (data.total_results === 0) {\n          alert(\n            `Sorry, there are no images matching your search query '${query}'. Please try again.`\n          );\n          return '';\n        }\n        setFilms(data.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [query, location.search]);\n\n  const updateQueryString = value => {\n    if (value === '') {\n      setSearchParams({});\n      return;\n    }\n    setSearchParams({ query: value });\n    setFilms([]);\n  };\n\n  return (\n    <>\n      {/* <Link to={backLinkLocationRef.current}  > Go Back </Link> */}\n      <SearchMovies onSubmit={updateQueryString} />\n      {/* Перевіряємо, чи відбувається завантаження */}\n      {isLoading && <div>Loading...</div>}\n\n      {/* Перевіряємо, чи є помилка */}\n      {error && !isLoading && (\n        <h2 style={{ textAlign: 'center' }}>\n          Try again. Something went wrong!\n        </h2>\n      )}\n\n      {!error && !isLoading && films.length > 0 && (\n        <Maper data={films} state={{ from: location }} />\n      )}\n    </>\n  );\n};\nexport default MoviesPage;\n\n\n// const Movies = () => { \n//    return (\n//         <div>            \n//             <Suspense fallback={<div>Loading...</div>}>\n//                 <Outlet />\n//             </Suspense>        \n//         </div>\n//     )\n// }\n// export default Movies","import axios from \"axios\";\n\nconst key = '278bf75944205bdb0a6474cdc0be106c'; \n\nasync function fetchTrend() {\n    try {\n        const {data} = await axios.get(`https://api.themoviedb.org/3/trending/all/day?api_key=${key}`)\n        // console.log(data.results);\n        return data.results\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\n\nasync function fetchMovie(filmName) {\n    try {\n        const {data} = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${filmName}&language=en-US&page=1&per_page=12&include_adult=false`)\n        // console.log(data.results);\n        return data;\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\n\nasync function fetchDetails(id) {\n    try {\n        const {data} = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`);\n        console.log(\"fetchDetails\", data);\n        return data;\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\nasync function fetchCast (movieId) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${key}`\n    );\n    // console.log(data.cast);\n    return data.cast;\n  } catch (error) {\n    throw new Error('Oops, there is no cast movie');\n  }\n};\n\nasync function  fetchReviews(movieId) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${key}`\n    );\n    // console.log(data.results);\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, we don`t have any reviews');\n  }\n};\n// async function fetchTop() {\n\n    \n//     let list = [];\n//     await axios.get(`https://api.themoviedb.org/3/trending/all/day?api_key=${key}`)\n//         .then(responce => {\n//             // console.log(\"in fetchTop\", responce.data.results)\n//             if (responce.data.results.length > 0) {\n//                 list = responce.data.results;\n//                 return\n//             }\n//                 return\n            \n            \n//         }).catch(error => console.log(\"in fetchTop\", error))\n           \n            \n              \n//     return list;\n// }\n\n// export async function getTrendingMovies() {\n//   try {\n//     const {data} = await axios.get(\n//       `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&include_adult=false`\n//     );\n//     return data;\n//   } catch (error) {\n//     throw new Error('Oops, we don`t have any movies');\n//   }\n// }\n\n// async function fetchMovie(filmName) {\n//     let list = [];\n//     await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${filmName}&language=en-US&page=1&per_page=12&include_adult=false`)\n//         .then(responce => {\n//             // console.log(\"in fetchMovie\", responce.data.results)\n//             if (responce.data.results.length > 0) {\n//                 list = responce.data.results;\n//                 return\n//             }\n//             return\n//         })\n//     return list;\n// }\n\n// async function fetchDetails(id) {\n//     let obj = {};\n//     await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`)\n//         .then(responce => {\n//             // console.log(\"in fetchDetails\", responce.data)\n//             if (responce.data) {\n//                 obj = responce.data;\n//                 return\n//             }\n//             return\n//         })\n//     return obj;\n// }\n\n// async function fetchReviews(id) {\n//     let list = [];\n//     await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${key}&language=en-US&page=1`)\n//         .then(responce => {\n//             // console.log(\"in fetchReviews\", responce.data.results)\n//             if (responce.data.results.length > 0) {\n//                 list = responce.data.results;\n//                 return\n//             }\n//             return\n//         })\n//     return list;\n// }\n\n// async function fetchCast(id) {\n//     let list = [];\n//     await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${key}&language=en-US`)\n//         .then(responce => {\n//             // console.log(\"in fetchTop\", responce.data.cast)\n//             if (responce.data.cast.length > 0) {\n//                 list = responce.data.cast;\n//                 return\n//             }\n//             return\n//         })\n//     return list;\n// }\n\n\n    \nconst api = {\n    // fetchTop,\n    fetchMovie,\n    fetchDetails,\n    fetchCast,\n    fetchReviews,\n    fetchTrend,\n}\n\n\nexport default api;"],"names":["data","location","useLocation","className","styles","map","item","id","title","name","to","state","from","onSubmit","initialValues","query","values","resetForm","trim","as","autoComplete","placeholder","autoFocus","type","useState","isLoading","setIsLoading","error","setError","films","setFilms","useSearchParams","searchParams","setSearchParams","get","console","log","useEffect","api","total_results","alert","results","message","search","value","style","textAlign","length","Maper","key","fetchTrend","axios","Error","fetchMovie","filmName","fetchDetails","fetchCast","movieId","cast","fetchReviews"],"sourceRoot":""}