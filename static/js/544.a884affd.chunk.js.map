{"version":3,"file":"static/js/544.a884affd.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Maper/Maper.module.css?d36b","components/Maper/Maper.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Maper\":\"Maper_Maper__4zIDv\",\"MaperItem\":\"Maper_MaperItem__v8LOy\"};","import React from \"react\";\n\nimport { Link, useLocation } from \"react-router-dom\";\n\nimport PropTypes from \"prop-types\";\n\nimport styles from \"./Maper.module.css\"\n\nconst Maper = ({data}) => {   \n    \n    const location = useLocation();\n    // console.log(data);\n    return (\n    <ul className={styles.Maper}>\n            {data.map(item => {\n                const { id, title, name } = item;\n                \n                return (\n                    <li key={id}>\n                        <Link\n                            className={styles.MaperItem}\n                            to={`/movies/${id}`}\n                            state={{ from: location }}                     \n                            \n                        >{title || name}</Link>\n                    </li>\n                )\n               \n            })}\n    </ul>\n    )\n     \n}\n\nexport default Maper;\n\nMaper.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string,\n        name: PropTypes.string,\n    }))\n}","import React, { useState, useEffect } from \"react\";\n\nimport Maper from \"components/Maper/Maper\";\n\nimport api from \"services/api\";\n\nconst Home = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n        try {\n          setIsLoading(true);\n          setError(null);\n          const result = await api.fetchTop();         \n          setMovies(result)\n        } catch (error) {\n          console.error(\"error in fetchTrend\", error.message);\n        }finally{setIsLoading(false);}\n    })();\n  }, [])\n\n\n  return (\n    <>\n      {isLoading && <div>Loading...</div>}\n      {error && !isLoading && <div>Try again</div>}\n      {!error && !isLoading && movies.length > 0 &&  <Maper data={movies} />  }\n    </>\n  )\n}\n\nexport default Home;","import axios from \"axios\";\n\nconst key = '278bf75944205bdb0a6474cdc0be106c'; \n\nasync function fetchTop() {\n    try {\n        const {data} = await axios.get(`https://api.themoviedb.org/3/trending/all/day?api_key=${key}`)\n        return data.results\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\n\nasync function fetchMovie(filmName) {\n    try {\n        const {data} = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${filmName}&language=en-US&page=1&per_page=12&include_adult=false`)\n        return data;\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\n\nasync function fetchDetails(id) {\n    try {\n        const {data} = await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`);\n        return data;\n    } catch (error) {\n        throw new Error('Oops, we don`t have any movies');\n    }\n}\nasync function fetchCast (movieId) {\n  try {\n    const { data } = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${key}`);\n    return data.cast;\n  } catch (error) {\n    throw new Error('Oops, there is no cast movie');\n  }\n};\n\nasync function  fetchReviews(movieId) {\n  try {\n    const { data } = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${key}`);\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops, we don`t have any reviews');\n  }\n};\n    \nconst api = {\n    fetchTop,\n    fetchMovie,\n    fetchDetails,\n    fetchCast,\n    fetchReviews,    \n}\n\n\nexport default api;"],"names":["data","location","useLocation","className","styles","map","item","id","title","name","to","state","from","useState","isLoading","setIsLoading","error","setError","movies","setMovies","useEffect","api","result","console","message","length","key","fetchTop","axios","results","Error","fetchMovie","filmName","fetchDetails","fetchCast","movieId","cast","fetchReviews"],"sourceRoot":""}